<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="836db1fb-29e5-4c2e-b518-69a5eb4a6c5b" name="Mark@MACPC 2012-12-20 16:05:07" runUser="MacPc\Mark" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="f45b0aff-07a5-4726-a4ce-984b897c8a14">
    <Description>These are default test settings for a local test run.</Description>
    <Deployment enabled="false" runDeploymentRoot="Mark_MACPC 2012-12-20 16_05_07" />
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
  </TestSettings>
  <Times creation="2012-12-20T16:05:07.6350360+01:00" queuing="2012-12-20T16:05:08.1342319+01:00" start="2012-12-20T16:05:08.5298764+01:00" finish="2012-12-20T16:05:14.5974604+01:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="insert_inventory_data" storage="c:\sourcecode\ecohotels\ecohotels.core.tests\bin\debug\ecohotels.core.tests.dll" id="1cc80d08-41ae-fbe4-c02f-ebd2d23eccc2">
      <Execution timeOut="1800000" id="7eec731e-f2b0-4bb8-958e-6ed87798b8e1" />
      <TestMethod codeBase="C:/SourceCode/EcoHotels/EcoHotels.Core.Tests/bin/Debug/EcoHotels.Core.Tests.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="EcoHotels.Core.Tests.Install.DataInstaller, EcoHotels.Core.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="insert_inventory_data" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="1cc80d08-41ae-fbe4-c02f-ebd2d23eccc2" executionId="7eec731e-f2b0-4bb8-958e-6ed87798b8e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="7eec731e-f2b0-4bb8-958e-6ed87798b8e1" testId="1cc80d08-41ae-fbe4-c02f-ebd2d23eccc2" testName="insert_inventory_data" computerName="MACPC" duration="00:00:05.1992367" startTime="2012-12-20T16:05:08.8571379+01:00" endTime="2012-12-20T16:05:14.4968294+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7eec731e-f2b0-4bb8-958e-6ed87798b8e1">
      <Output>
        <StdOut>NHibernate: SELECT date0_.Id as Id7_0_, date0_.Value as Value7_0_ FROM Calendar date0_ WHERE date0_.Id=@p0;@p0 = 1 [Type: Int32 (0)]
NHibernate: INSERT INTO RoomTypeInventory (Quantity, PriceGroup, RoomTypeId, CalendarId) VALUES (@p0, @p1, @p2, @p3); select SCOPE_IDENTITY();@p0 = 0 [Type: Int32 (0)], @p1 = 0 [Type: Int32 (0)], @p2 = 88d2d49f-af10-4d3a-ae4f-a0b9011c2fa0 [Type: Guid (0)], @p3 = NULL [Type: Int32 (0)]</StdOut>
        <DebugTrace>SessionScope Initializing...
SessionScope BeginTransaction
SessionScope EndTransaction
null id in EcoHotels.Core.Domain.Models.RevenueManagement.RoomTypeInventory entry (don't flush the Session after an exception occurs)
</DebugTrace>
        <ErrorInfo>
          <Message>Test method EcoHotels.Core.Tests.Install.DataInstaller.insert_inventory_data threw exception: 
NHibernate.Exceptions.GenericADOException: could not insert: [EcoHotels.Core.Domain.Models.RevenueManagement.RoomTypeInventory][SQL: INSERT INTO RoomTypeInventory (Quantity, PriceGroup, RoomTypeId, CalendarId) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()] ---&gt; System.Data.SqlClient.SqlException: Cannot insert the value NULL into column 'CalendarId', table 'EcoHotels.dbo.RoomTypeInventory'; column does not allow nulls. INSERT fails.
The statement has been terminated.</Message>
          <StackTrace>    at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning()
   at System.Data.SqlClient.TdsParser.Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj)
   at System.Data.SqlClient.SqlDataReader.ConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, DbAsyncResult result)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Id.IdentityGenerator.InsertSelectDelegate.ExecuteAndExtract(IDbCommand insert, ISessionImplementor session)
   at NHibernate.Id.Insert.AbstractReturningDelegate.PerformInsert(SqlCommandInfo insertSQL, ISessionImplementor session, IBinder binder)
 --- End of inner exception stack trace ---
    at NHibernate.Id.Insert.AbstractReturningDelegate.PerformInsert(SqlCommandInfo insertSQL, ISessionImplementor session, IBinder binder)
   at NHibernate.Persister.Entity.AbstractEntityPersister.Insert(Object[] fields, Boolean[] notNull, SqlCommandInfo sql, Object obj, ISessionImplementor session)
   at NHibernate.Persister.Entity.AbstractEntityPersister.Insert(Object[] fields, Object obj, ISessionImplementor session)
   at NHibernate.Action.EntityIdentityInsertAction.Execute()
   at NHibernate.Engine.ActionQueue.Execute(IExecutable executable)
   at NHibernate.Event.Default.AbstractSaveEventListener.PerformSaveOrReplicate(Object entity, EntityKey key, IEntityPersister persister, Boolean useIdentityColumn, Object anything, IEventSource source, Boolean requiresImmediateIdAccess)
   at NHibernate.Event.Default.AbstractSaveEventListener.PerformSave(Object entity, Object id, IEntityPersister persister, Boolean useIdentityColumn, Object anything, IEventSource source, Boolean requiresImmediateIdAccess)
   at NHibernate.Event.Default.AbstractSaveEventListener.SaveWithGeneratedId(Object entity, String entityName, Object anything, IEventSource source, Boolean requiresImmediateIdAccess)
   at NHibernate.Event.Default.DefaultSaveOrUpdateEventListener.SaveWithGeneratedOrRequestedId(SaveOrUpdateEvent event)
   at NHibernate.Event.Default.DefaultSaveEventListener.SaveWithGeneratedOrRequestedId(SaveOrUpdateEvent event)
   at NHibernate.Event.Default.DefaultSaveOrUpdateEventListener.EntityIsTransient(SaveOrUpdateEvent event)
   at NHibernate.Event.Default.DefaultSaveEventListener.PerformSaveOrUpdate(SaveOrUpdateEvent event)
   at NHibernate.Event.Default.DefaultSaveOrUpdateEventListener.OnSaveOrUpdate(SaveOrUpdateEvent event)
   at NHibernate.Impl.SessionImpl.FireSave(SaveOrUpdateEvent event)
   at NHibernate.Impl.SessionImpl.Save(Object obj)
   at EcoHotels.Core.Tests.Install.DataInstaller.insert_inventory_data() in C:\SourceCode\EcoHotels\EcoHotels.Core.Tests\Install\DataInstaller.cs:line 55
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
  </Results>
</TestRun>